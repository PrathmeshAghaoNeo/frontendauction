
 
namespace CommunityCourtOfJustice.Identity

{

    public static class IdentityServiceRegistration

    {

        public static IServiceCollection AddIdentityServices(this IServiceCollection services, IConfiguration configuration)

        {

            // Add authentication with JWT bearer token

            var key = Encoding.UTF8.GetBytes(configuration["JwtSettings:Key"]);

            services.AddScoped<IAuthService, AuthService>();

            // Configure JWT Authentication

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)

                .AddJwtBearer(options =>

                {

                    options.TokenValidationParameters = new TokenValidationParameters

                    {

                        ValidateIssuer = true,

                        ValidateAudience = true,

                        ValidateLifetime = true,

                        ValidateIssuerSigningKey = true,

                        ValidIssuer = configuration["JwtSettings:Issuer"],

                        ValidAudience = configuration["JwtSettings:Audience"],

                        IssuerSigningKey = new SymmetricSecurityKey(key)

                    };

                });
 
            return services;

        }

    }

}

 

 
namespace CommunityCourtOfJustice.Identity.Services

{

    public class AuthService : IAuthService

    {

        private readonly ApplicationDbContext _context;

        private readonly IConfiguration _config;
 
        public AuthService(ApplicationDbContext context, IConfiguration config)

        {

            _context = context;

            _config = config;

        }
 
        // Implement LoginAsync method to authenticate the user and generate JWT

        public async Task<string?> LoginAsync(string email, string password)

        {

            // Find the user by email and check if the password matches

            var admin = await _context.AdminUsers

                .FirstOrDefaultAsync(a => a.Email == email && a.Password == password && a.IsActive == true && a.IsDeleted == false);
 
            // If no user found or password mismatch, return null

            if (admin == null)

                return null;
 
            // Generate JWT token if authentication is successful

            return GenerateJwtToken(admin);

        }
 
        // Method to generate JWT token

        private string GenerateJwtToken(AdminUser admin)

        {

            // Define security key and signing credentials

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["JwtSettings:Key"]));

            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
 
            // Get the expiration time from appsettings

            var expirationTimeInMinutes = Convert.ToInt32(_config["JwtSettings:ExpirationTimeInMinutes"]);

            var expirationTime = DateTime.UtcNow.AddMinutes(expirationTimeInMinutes);
 
            // Define claims (user details to be embedded in the token)

            var claims = new[]

            {

                new Claim(ClaimTypes.NameIdentifier, admin.AdminUserId.ToString()),

                new Claim(ClaimTypes.Email, admin.Email),

                new Claim(ClaimTypes.Name, admin.UserName),

                new Claim(ClaimTypes.Role, "Admin")

            };
 
            // Create the JWT token

            var token = new JwtSecurityToken(

                issuer: _config["JwtSettings:Issuer"],

                audience: _config["JwtSettings:Audience"],

                claims: claims,

                expires: expirationTime,  // Use the expiration time from appsettings

                signingCredentials: creds

            );
 
            // Return the token as a string

            return new JwtSecurityTokenHandler().WriteToken(token);

        }

    }

}

 

 
namespace CommunityCourtOfJustice.Identity.Services

{

    public static class JwtAuthenticationService

    {

        public static void ConfigureJwtAuthentication(this IServiceCollection services, IConfiguration configuration)

        {

            var key = Encoding.UTF8.GetBytes(configuration["JwtSettings:Key"]);
 
            services.AddAuthentication(options =>

            {

                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;

                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;

            })

            .AddJwtBearer(options =>

            {

                options.TokenValidationParameters = new TokenValidationParameters

                {

                    ValidateIssuer = true,

                    ValidateAudience = true,

                    ValidateLifetime = true,

                    ValidateIssuerSigningKey = true,

                    ValidIssuer = configuration["JwtSettings:Issuer"],

                    ValidAudience = configuration["JwtSettings:Audience"],

                    IssuerSigningKey = new SymmetricSecurityKey(key)

                };

            });

        }

    }

}

 
these are all setting for jwt
 
namespace CommunityCourtOfJustice.Infrastructure.Mail

{

    public class EmailService : IEmailService

    {

        private readonly IConfiguration _configuration;

        private readonly EmailTemplateHelper _emailTemplateHelper;

        public EmailService(IConfiguration configuration,EmailTemplateHelper emailTemplateHelper)

        {

            _configuration = configuration;

            _emailTemplateHelper = emailTemplateHelper;

        }
 
        public async Task SendAsync(string to, string subject, string body)

        {

            var smtpHost = _configuration["SmtpSettings:Host"];

            var smtpPort = int.Parse(_configuration["SmtpSettings:Port"]);

            var smtpUser = _configuration["SmtpSettings:Username"];

            var smtpPass = _configuration["SmtpSettings:Password"];

            var fromEmail = _configuration["SmtpSettings:From"];
 
            using var client = new SmtpClient(smtpHost, smtpPort)

            {

                Credentials = new NetworkCredential(smtpUser, smtpPass),

                EnableSsl = true

            };
 
            var mailMessage = new MailMessage(fromEmail, to, subject, body)

            {

                IsBodyHtml = true

            };
 
            await client.SendMailAsync(mailMessage);

        }
 
        public async  Task SendTemplatedEmailAsync(string to,  string templateName, Dictionary<string, string> placeholders)

        {

            var subject = await _emailTemplateHelper.GetEmailSubjectAsync(templateName, placeholders);

            var body =await _emailTemplateHelper.GetEmailBodyAsync(templateName, placeholders);

            await SendAsync(to, subject, body);

        }

    }

}

 
 
namespace CommunityCourtOfJustice.Infrastructure.Mail

{

    public class EmailTemplateHelper

    {
 
        private readonly ApplicationDbContext _applicationDbContext;

        public EmailTemplateHelper(ApplicationDbContext applicationDbContext)

        {
 
            _applicationDbContext = applicationDbContext;

        }

        public async Task<string> GetEmailBodyAsync(string templateName, Dictionary<string, string> placeholders)

        {

            var template = await _applicationDbContext.EmailTemplates

                 .Where(t => t.Name == templateName)

                 .FirstOrDefaultAsync();
 
            if (template == null)

                throw new Exception($"Email template {templateName} not found");
 
            var body = template.Body ?? "";

            foreach (var placeholder in placeholders)

            {

                body = body.Replace($"{{{{{placeholder.Key}}}}}", placeholder.Value);
 
            }

            return body;

        }

        public async Task<string> GetEmailSubjectAsync(string templateName, Dictionary<string, string> placeholders)

        {

            var template = await _applicationDbContext.EmailTemplates

                .Where(t => t.Name == templateName)

                .FirstOrDefaultAsync();
 
            if (template == null)

                throw new Exception($"Email template {templateName} not found");

            var subject = template.Subject ?? "";

            foreach (var placeholder in placeholders)

            {

                subject = subject.Replace($"{{{{{placeholder.Key}}}}}", placeholder.Value);

            }

            return subject;

        }

    }

}

 